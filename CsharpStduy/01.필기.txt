4강. C#기본 문법

1. 연산자
- + - ! ~ ++ --
- !은 BOOL형에만 사용
- *,/,*,%,-,+
- string에서 +는 문자열 연결

정수/부동 +"문자열" ="문자열"

1-1 is 연산자
-형식 호환을 조사하는 연산자
-형식
'변수' is  '클래스형or데이터형'
  a     is        b
결과는 true,false;
-박싱/언박싱 변환,참조 변환에서 사용

1-2 as연산자
-형변한과 변환 좟
-캐스트 연산자의 역할과
  불변환은 null리턴
-참조,박싱,언박싱,null형에 사용
-형식
  결과형 = 참조형,언박싱,박싱 as 변환형

1-3 비트 연산자와 논리 연산자
c와 c++에서 똑같음
-NULL병합 연산자
C= A ?? B

A가 null이 아니면 A를 C에 대입
A가 null이면 B를 C에 대입

2.제어문

2-1.선택문
-if~else
-switch,case
-정수,문자상수,문자열
-모든 case와 defalult에는 break가 반드시 있어야 함

2-2.반복문
-for
 for(;;)->무한반복
-while,do~while
 while(true)

-foreach
 처음부터 끝까지 순차적으로 값을 
 반복하여 읽는 역활 ->읽기 전용
 foreach(데이터형 변수in배열명(컬렉션명))//데이터형 변수는 읽기 전용
{

}

04 예외 처리문 ****제일 중요*****
예외란?
 런타임 시에 발생할 수 있는 오류
예외 처리 방법
 -if~else
 -try~catch문 사용
=>블럭 안에 에러가 발생할 수있는 경우를 넣음

try{
//예외가 발생할 수 있는 코드


}catch(예외처리객체 e){
//예외 처리
}

-System.Exception 파생 객체만 사용
OverFlowException
FormatException
DivideByZeroException
FileNotFoundException

-IndexOutOfRangeException

-try문 안에서 초기화한 변수를 try문 밖에서 사용할 수 없다.
-예외가 발생 해야지만 실행 되는 구문

try ~finally
-finally
 예외 발생과 상관없이 항상 실행되는 구문
-예외적인 상황이 발생했을 때 finally 처리
-예외상황이 발생하지 않았을 때 fially 처리

다중 예외 처리
-형식
try{

}catch(OverFlowException e)
{

}catch(FormatException e)}

}catch(DivideByZeroException e){

}

throw
-throw(던지다)
 예외 상황을 임의로 발생시키는 역활
-System.Exception 파생된 객체만 사용
-try문과 그 외에서 사용가능
