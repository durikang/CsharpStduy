1.C#의 데이터형 obecj로 부터 파생된 객체

객체 = 멤버 변수+메서드;

System.Object ==object

c인 경우 
int -> 메모리와 직결
4byte 메모리 공간 확보
             저장할수 있는 공간 제공

데이터 형은 CTS(공용 형식 사양)에서 정의된 객체

-정수형 
bool : System.BOOlean, 1byte
->true와 false값을 가짐  
char: System.Char , 2byte 
->c#에서 바뀐점. 유니코드(모든 나라의 언어를 표현하기 위함)
byte: System.Byte , 1byte
sbyte:System.SByte,1 byte
short:System.Int16 , 2 byte
ushort:System.UInt16, 2byte
int:System.Int32, 4byte
uint:System.UInt32, 4byte
long: System.System.64, 8byte
ulong: System.UInt.64, 8byte

-실수형
float :System.Single , 4byte
double: System.Double, 8byte
decimal: System.Decimal, 16byte

문자열 ->기본 자료형으로 되어 있어 많이 편리해짐
string: System.String

bool형
true,false만 저장 가능
그외에 숫자는 사용 금지

char형 

유니코드
2 byte
char형의 암시적 값 변환
ushort, int,uint,long,ulong,float,double,decimal
int Number='7';

string형

c/c++문자열과 차이점
문자열 끝에 0,'\0'->NULL문자가 포함

'+':문자열 연결
==:문자열 비교
[인덱스]:문자

문자열에 '\'를 포함하는 경우
@"c:\temp\test.txt"-> @를 쓸경우 일반적인 경우 많이 쓰임
"c:\\temp\\test.txt"-> @를 안쓸 경우

암시적 데이터 var
-대입되는 데이터에 따라 데이터형 결정
-var를 사용할 수 없는 예
1)null값 초기화, 매개변수(함수의 복사와 대입)로는 사용 못함.
2)var는 지역변수로만 사용
  클래스 멤버로는 사용 못함
3)연속적으로 초기화 하는 경우
  var m=10,=20; -> X 못씀

nullable 형
null을 허용하지 않는 데이터형이 ->기본 데이터 형을 허용하지 않음.
null값을 허용->null을 저장하겠다는 의미.
형식
데이터형? 변수명;
int? var1;
bool?var2=null;//true,false,null까지 저장.

-속성
.HasValue //true,false
.Value//읽기 전용


데이터의 변환

-Tostring()
-기본 데이터형.parse()
-Convert.ToInt32()//int형
 Convert.ToSingle()//float형
 Convert.TOXXXXX()


