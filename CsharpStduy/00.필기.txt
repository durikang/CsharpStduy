1.C#의 데이터형 obecj로 부터 파생된 객체

객체 = 멤버 변수+메서드;

System.Object ==object

c인 경우 
int -> 메모리와 직결
4byte 메모리 공간 확보
             저장할수 있는 공간 제공

데이터 형은 CTS(공용 형식 사양)에서 정의된 객체

-정수형 
bool : System.BOOlean, 1byte
->true와 false값을 가짐  
char: System.Char , 2byte 
->c#에서 바뀐점. 유니코드(모든 나라의 언어를 표현하기 위함)
byte: System.Byte , 1byte
sbyte:System.SByte,1 byte
short:System.Int16 , 2 byte
ushort:System.UInt16, 2byte
int:System.Int32, 4byte
uint:System.UInt32, 4byte
long: System.System.64, 8byte
ulong: System.UInt.64, 8byte

-실수형
float :System.Single , 4byte
double: System.Double, 8byte
decimal: System.Decimal, 16byte

문자열 ->기본 자료형으로 되어 있어 많이 편리해짐
string: System.String

bool형
true,false만 저장 가능
그외에 숫자는 사용 금지

char형 

유니코드
2 byte
char형의 암시적 값 변환
ushort, int,uint,long,ulong,float,double,decimal
int Number='7';

string형

c/c++문자열과 차이점
문자열 끝에 0,'\0'->NULL문자가 포함

'+':문자열 연결
==:문자열 비교
[인덱스]:문자

문자열에 '\'를 포함하는 경우
@"c:\temp\test.txt"-> @를 쓸경우 일반적인 경우 많이 쓰임
"c:\\temp\\test.txt"-> @를 안쓸 경우

암시적 데이터 var
-대입되는 데이터에 따라 데이터형 결정
-var를 사용할 수 없는 예
1)null값 초기화, 매개변수(함수의 복사와 대입)로는 사용 못함.
2)var는 지역변수로만 사용
  클래스 멤버로는 사용 못함
3)연속적으로 초기화 하는 경우
  var m=10,=20; -> X 못씀

nullable 형
null을 허용하지 않는 데이터형이 ->기본 데이터 형을 허용하지 않음.
null값을 허용->null을 저장하겠다는 의미.
형식
데이터형? 변수명;
int? var1;
bool?var2=null;//true,false,null까지 저장.

-속성
.HasValue //true,false
.Value//읽기 전용


데이터의 변환

-Tostring()
-기본 데이터형.parse()
-Convert.ToInt32()//int형
 Convert.ToSingle()//float형
 Convert.TOXXXXX()

박시과 언박싱
-박싱
 데이터 형을 최상위 object 형으로 변환하여 
 힙(heap메모리)에 저장
 int m=123;
 object obj=m;
-언박싱
 힙에 저장된 형식을 다시 원래의 형식으로 변환
 int n=(int)obj;

표준 입력.
-Console.ReadKey()
 사용자가 눌린 키 한 문자 정보를 리턴하는 메서드
- 함수 원형
 public static CosnoleKeyInfo ReadKey()
 public static ConsoleKeyInfo ReadKey(bool intercept)
 => true: 화면 출력 안 함 
      false:화면 출력
 ConsoleKeyInfo 속성
 키의 문자와 Shift,Alt,Ctrl 보조키 상태 포함
 -ConsoleKeyInfo.Key
  ConsoleKey 열거형 값
  ConsoleKey.A, ConsoleKey.Escape 등 ...
  MSDN에서 찾아볼 것.

-ConsoleKeyInfo.KeyChar
 눌린 키의 유니코드를 얻는 속성으로
 대소문자 등을 모두 구분할 수 있다.
 

사용자 지정형

1.구조체
public :: 접근 지정자(멤버랑 속성 메서드를 모두에게 쓸 수 있게끔 해줌)

public struct 구조체명
{
//멤버,속성,메서드

}

*제한 사항
-구조체에 선언된 const, static 변수만 초기화 가능
-구조체 안에 선언할 수 있는 생성자는 매개변수가 반드시 있어야 한다.
-구조체를 같은 구조체에 대입하게 되면 값이 복사 된다.
-구조체는 값 형식이고 클래스는 참조 형식이다.
=>구조체의 값을 대입하고 그것을 다른 값으로 초기화 해서 출력하면 
그 다른 값이 출력 돼는대,
클래스는 클래스의 내용을 참조 하기 때문에 다른 클래스를 바꾸게 되면 원래 클래스도 같이 바뀌게 됀다.
-구조체는 값 형식이므로 선언마느로도 사용 가능하다.

new 를 사용 했을 때만
 ->생서앚가 호출
    ->기본값으로 초기화
-구조체는 구조체 또는 클래스에 상속할 수 없다.
-구조체는 인터페이스를 상속하여 메서드를 구현할 수 있다.

열겨형
-상수를 문자열로 대치하여 선언
 상숭 의미 부여

-형식
enum 열거형 명칭{ 문자열1,문자열2};//기본 0,1 .. 
enum 열거형 명칭{문자열1 =상수,//1이면 다음 2
                          문자열 2=상수};
enum 열거형 명칭{문자열1 =상수,//3이면 다음은 3
                          문자열 2};

-기본은 int형이미지만 char형을 제외한 형식 지정할 수 있음
 enum Days: byte{Sun =0,Mon,Tue,Wed,Thu};

-열거형 변수가 아닌 변수에 열거형 값을 대입할 때는 데이터형을 명시할 것.

값 형식과 참조 형식

값 형식
-System.Object 
 +System.ValueType에서 파생
-변수가 직접 값을 저장하는 형
-기본 데이터형,구조체,열거형
-선언vs생성(new)

참조 형식
-한 객체를 참조형 변수가 사용할 때
 참조형에 의해 내용이 바뀌면, 객체에 영향을 줌
-class,interface,delegate,배열,string
-객체와 참조형 사이의 대입은 객체의 메모리 주소가 복사됨.

