목차

1.배열 형식 비교
2.클래스 배열
3.속성과 인덱서 비교

배열 형식 비교
1.고정 배열
*일차원 배열 선언과 값 할당
 int[] arry;
 arry=new int[3] {1,2,3};
 int[] arry = new int[] {1,2,3}
 int[] arry = {1,2,3};

*이차원, 다차원 배열 선언
 int[,] arr1 =new int[2,3]
 int[,,] arr2= new int[2,3,4]

*선언과 동시에 값 할당
 int[,] arr1 = new int[,] {{1,2},{3,4}); //2차원 배열
 int[,] arr2 = new int[,,] //3차원 배열
	{
	   {{1,2},{3,4}},
	   {{5,6},{7,8}}
	};
 arr[1,0] =3;
 arr[0,1,2]=4;

2. 가변 배열
*형식
 int[][] arry = new int[2][];
 arry[0] = new int[4];	-> 각각 0으로 초기화 됨.
 arry[1] = new int[3];

 arr[0] = new int[] {1,2,3,4}	->값을 넣게 되면 열의 갯수가 정해짐
 arr[1] = new int[] {5,6,7};

*선언과 동시에 할당
-int[][] arr = new int[][]{
	new int[3]{1,2,3},
	new int[2]{4,5}
};

int[][] arr=new int[][]{
	new int[]{1,2,3},
	new int{4,5}
};

*사용 형식
arr[0][9] = 12;
arr[1][2][3]=13;

3.클래스 배열
*형식
class A
{ ...}

A[] TestArr=new A[3];
TestArr[0] =new A();	->new를 통해 생성해줬기 때문에 객체가 됨
TestArr[1] =new A();	->new를 안붙히면 참조형임.
TestArr[2] =new A();

class A{
	public int number;

}
A[] TestArry = new A[3];
TestArry[0] = new A();
TestArry[0].number=12;

int res=TestArry[0].number;

4.속성 형식
속성의 목적
private,proteced 멤버 변수를 외부에서 접근하기 위한 것
class A
{			A Test=new A();
	int number;	Test.Number=10;
	public int Number{ ...
			int result = Test.Number;
	get{return number;} //읽고
	set{number = value;}//쓰고

	}
}

클래스 배열의 변수와 속성 비교
예제 1. 배열 클래스			예제2. 속성 배열 클래스
class a				class A 
{				{
	public int number;		    private int number;
}					public int Number{
A[] TestArry = new A[3];			    get{return number;}
TestArry[0].new A();				    set{numer=value;}
TestArry[0].number=12;			}
				} 
				A[] TestArry= new A[3];
				TestArr[0]=new A();
예제3.클래스 내부의 함수		TestArry[0].Number=12;
class A{
	public int[] number= new int[3];
}

A[] Test =new A[2];
Test[0] = new A();
Test[1] = new A();
Test[0].number[0]=3;

예제4.인덱서 클래스
class A{
	int[] number =new int[3];
	public int this[int index]
	{
	   get {return number[index];}
	   set{number[index]=value;}
	}
}
}
A[]test=new A[2];
Test[0]= new A();
Test[0][0]=1;	=>배열과 비슷하게 쓰이기 때문에 헷갈릴 가능성이 있음.

